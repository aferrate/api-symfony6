# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: [ 'controller.service_arguments' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Elasticsearch\Repository\CarRepository: ~
    App\Doctrine\Repository\CarRepository: ~
    App\Elasticsearch\Repository\UserRepository: ~
    App\Doctrine\Repository\UserRepository: ~

    App\Domain\Repository\CarRepositoryInterface $carRepoBackup: '@App\Elasticsearch\Repository\CarRepository'
    App\Domain\Repository\CarRepositoryInterface: '@App\Doctrine\Repository\CarRepository'
    App\Domain\Repository\UserRepositoryInterface $userRepoBackup: '@App\Elasticsearch\Repository\UserRepository'
    App\Domain\Repository\UserRepositoryInterface: '@App\Doctrine\Repository\UserRepository'

    App\Domain\Cache\CacheInterface $cacheRedis: '@App\Services\CacheRedis'
    App\Domain\Cache\CacheInterface $cacheLogger: '@App\Services\CacheDecoratorLog'

    _instanceof:
        App\Domain\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command.bus }

        App\Domain\Query\QueryHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }

    App\EventListener\JWTCreatedListener:
        arguments: [ '@request_stack' ]
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_created,
                method: onJWTCreated
            }

    App\EventListener\JWTDecodedListener:
        arguments: [ '@request_stack' ]
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_decoded,
                method: onJWTDecoded
            }

    App\EventListener\JWTAuthenticationSuccessListener:
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_authentication_success,
                method: onAuthenticationSuccessResponse,
                priority: -1000,
            }

    App\Bus\CommandBus:
        public: true

    App\Bus\QueryBus:
        public: true